1. Components: Your Building Blocks
At its core, React is all about components.

A component is a JavaScript function. This function's job is to describe what a part of your website looks like and how it behaves.
Imagine components as LEGO bricks for your website. A component can be anything from a small button or a search bar to an entire section of a page.
Reusable: You can write a component once and use it many times throughout your application, saving you time and effort.
2. JSX: Writing UI in JavaScript
Inside your React components, you'll use JSX.

JSX is a special syntax that looks a lot like HTML but is actually JavaScript. It makes it intuitive to describe your UI directly within your JavaScript code.
Example: return <h1>Hello, User!</h1>;
Behind the scenes, React transforms this JSX into regular JavaScript that web browsers can understand.
3. Props: Passing Data Down
Props (short for "properties") are how you pass information into components.

Think of props as giving instructions or data to your LEGO bricks. For example, if you have a Greeting component, you might want it to greet different users.
Example: You can use <Greeting name="Alice" /> and <Greeting name="Bob" />. Inside the Greeting component, you'd access this data via props.name.
Key Point: Props are for data that a component receives and cannot change itself.
4. State: A Component's Memory
Sometimes, a component needs to remember things that can change over time. This internal "memory" is called state.

For instance, a counter needs to remember its current count, or a form input needs to remember what the user typed.
When a component's state changes, React automatically re-runs the component's function and updates the screen to show the latest information.
Example: A button that counts clicks. Each click updates its internal "count" state, and React re-displays the new number.
5. Rendering: Showing on Screen
Rendering is the process where React takes your components and displays them as actual pixels on the user's screen.

When a component's props or state change, React "re-renders" that component (and any affected child components) to reflect the new data.
6. Hooks: Special Component Functions
Hooks are special built-in React functions that let you "hook into" React features like state and side effects directly from your functional components. They always start with the word use.

useState Hook: For Component Memory
This is the primary way your component gets a "memory."

You use useState when your component needs to keep track of a value that can change (e.g., a counter, user input, a toggle switch).
How it works:
You call React.useState(initialValue), providing the starting value for your memory.
It returns an array with two things:
The current value of your memory (e.g., count).
A special function to update that memory (e.g., setCount).
Example: const [count, setCount] = React.useState(0);
count holds the current number, starting at 0.
setCount is the only way to change count. Calling setCount(newNumber) tells React the memory has changed, and it will re-draw your component with the new number.
useEffect Hook: For Actions After Rendering
This hook lets you perform "side effects" in your componentsâ€”actions that happen outside of simply calculating what to show on the screen.

Common uses:
Fetching data from a server after your component appears.
Manually changing the browser's document title.
Setting up or cleaning up things like timers.
How it works (basic): You give useEffect a function, which React will run after it has updated the screen. You can also specify when to re-run this function (e.g., only when certain data changes, or only once when the component first loads).
Analogy: If your component is a robot, useState is its internal memory. useEffect is like telling the robot: "Okay, after you've finished setting up your display (rendering), then go do this other task."